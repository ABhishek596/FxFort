#
# There is insufficient memory for the Java Runtime Environment to continue.
# Native memory allocation (malloc) failed to allocate 32744 bytes for ChunkPool::allocate
# Possible reasons:
#   The system is out of physical RAM or swap space
#   The process is running with CompressedOops enabled, and the Java Heap may be blocking the growth of the native heap
# Possible solutions:
#   Reduce memory load on the system
#   Increase physical memory or swap space
#   Check if swap backing store is full
#   Decrease Java heap size (-Xmx/-Xms)
#   Decrease number of Java threads
#   Decrease Java thread stack sizes (-Xss)
#   Set larger code cache with -XX:ReservedCodeCacheSize=
#   JVM is running with Unscaled Compressed Oops mode in which the Java heap is
#     placed in the first 4GB address space. The Java Heap base address is the
#     maximum limit for the native heap growth. Please use -XX:HeapBaseMinAddress
#     to set the Java Heap base and to place the Java Heap above 4GB virtual address.
# This output file may be truncated or incomplete.
#
#  Out of Memory Error (arena.cpp:78), pid=11248, tid=13036
#
# JRE version: OpenJDK Runtime Environment (17.0.2+8) (build 17.0.2+8-86)
# Java VM: OpenJDK 64-Bit Server VM (17.0.2+8-86, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, windows-amd64)
# No core dump will be written. Minidumps are not enabled by default on client versions of Windows
#

---------------  S U M M A R Y ------------

Command Line: -Dfile.encoding=utf8 c:\Users\aanan\.vscode\extensions\vscjava.vscode-gradle-3.13.5\lib\gradle-language-server.jar

Host: Intel(R) Core(TM) i3-4010U CPU @ 1.70GHz, 4 cores, 5G,  Windows 10 , 64 bit Build 19041 (10.0.19041.3636)
Time: Thu Jun 13 16:22:26 2024 India Standard Time elapsed time: 1.497617 seconds (0d 0h 0m 1s)

---------------  T H R E A D  ---------------

Current thread (0x000002162c4f6110):  JavaThread "C1 CompilerThread0" daemon [_thread_in_native, id=13036, stack(0x000000f8f5d00000,0x000000f8f5e00000)]


Current CompileTask:
C1:   1497   25       3       java.util.HashMap::putVal (300 bytes)

Stack: [0x000000f8f5d00000,0x000000f8f5e00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0x670baa]
V  [jvm.dll+0x7cfcb4]
V  [jvm.dll+0x7d145e]
V  [jvm.dll+0x7d1ac3]
V  [jvm.dll+0x242bc5]
V  [jvm.dll+0xaa7c0]
V  [jvm.dll+0xaab0c]
V  [jvm.dll+0x11a5b5]
V  [jvm.dll+0x17ed66]
V  [jvm.dll+0x1807ed]
V  [jvm.dll+0x17fe7b]
V  [jvm.dll+0x147cab]
V  [jvm.dll+0x131f18]
V  [jvm.dll+0x1320a0]
V  [jvm.dll+0x132366]
V  [jvm.dll+0x1317fa]
V  [jvm.dll+0x1334c1]
V  [jvm.dll+0x224908]
V  [jvm.dll+0x222a6c]
V  [jvm.dll+0x7859bb]
V  [jvm.dll+0x77ff7a]
